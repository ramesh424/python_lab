

def calculate_mean_median_mode(numbers):
    numbers.sort()  # Sort the list for median and mode calculations
    
    # Calculate Mean
    mean_value = sum(numbers) / len(numbers)
    
    # Calculate Median
    mid = len(numbers) // 2
    if len(numbers) % 2 == 0:  # Even number of elements
        median_value = (numbers[mid - 1] + numbers[mid]) / 2.0
    else:  # Odd number of elements
        median_value = numbers[mid]
    
    # Calculate Mode
    # Creating a frequency map
    frequency_map = {}
    for number in numbers:
        if number in frequency_map:
            frequency_map[number] += 1
        else:
            frequency_map[number] = 1
            
    # Finding the number(s) with the highest frequency
    max_frequency = max(frequency_map.values())
    mode_value = [number for number, freq in frequency_map.items() if freq == max_frequency]
    
    return mean_value, median_value, mode_value

# Example usage (Commented out to follow the guidelines)
numbers = [1, 2, 3, 4, 5, 5, 3] 
mean_value, median_value, mode_value = calculate_mean_median_mode(numbers)
print(f"Mean: {mean_value}, Median: {median_value}, Mode: {mode_value}")
